#!/usr/bin/env bash
##############################################################################
# Name:
#   auxchecktap - check and summarize TAP unit test results
#
# Introduction:
#   auxchecktap facilitates integration and checking of TAP format unit test
#   results. "TAP" stands for "Test Anything Protocol" and is described at
#   https://testanything.org/. Most unit test tools have the ability to
#   generate test results in TAP format.
# 
# Usage:
#   auxchecktap [options] [filespec...]
#
# Options and Parameters:
#   See "help" display in code (or the man page).
#
# Copyright:
#   auxwhere Copyright Â© 2017 Eric Alan Christiansen.
#
# Legal:
#   This program comes with ABSOLUTELY NO WARRANTY.
#   This is free software, and you are welcome to use and/or redistribute it
#   under the conditions of the GNU General Public License v3.0.
#   (See https://www.gnu.org/licenses/gpl-3.0.en.html)
#
# More Information:
#   - auxilium - See https://github.com/ericmotleybytes/auxilium.
#
# Requirements:
#   - bash version 4.2 or higher.
##############################################################################
#
# define functions
#
function ct_debug() {
    if [ "$debugflag" == "y" ]; then
        echo "DEBUG: $1" >&2
    fi
    return 0
}
function check_for_previous_tapgrand() {
    local line="$1"
    local statpart=""
    local stats=()
    local numfiles
    local numtests
    local numerrs
    if [[ "$line" =~ ^.+\[TAPGRAND:\ .+\]$ ]]; then
        statpart="${line##*TAPGRAND:\ }"
        statpart="${statpart%%]}"
        stats=($statpart)
        if [ "${#stats[@]}" != "6" ]; then
            ct_debug "Unexpected TAPTOTAL line format ($statpart)."
            return 1
        fi
        numfiles="${stats[0]}"
        numtests="${stats[2]}"
        numerrs="${stats[4]}"
        grandfilecnt=$(($grandfilecnt+$numfiles))
        grandtestcnt=$(($grandtestcnt+$numtests))
        granderrcnt=$(($granderrcnt+$numerrs))
    fi
    return 0
}
#
# begin main program
#
cmdfile=$(readlink -f "$0")
cmdname="${cmdfile##*/}"
version="$cmdname version 1.0 (2017-06-28)"
filespecs=()
curexptestcnt=$((0))    # current file expected test count
curtestcnt=$((0))       # current file test count (pass or fail)
curfailcnt=$((0))       # current file fail count
curerrcnt=$((0))        # current file error count
curlinecnt=$((0))       # current file line count
curxlinecnt=$((0))      # current file xtra (comment) line count
curblinecnt=$((0))      # current file blank line count
curfirstexptestnum=""   # current file first expected test number
curlastexptestnum=""    # current file last expected test number
curfirstacttestnum=""   # current file first actual test number
curlastacttestnum=""    # current file last actual test number
totstdincnt=$((0))      # total standard in count (0 or 1)
totfilecnt=$((0))       # total file count (including standard in)
totlinecnt=$((0))       # total line count
totxlinecnt=$((0))      # total xtra line count
totblinecnt=$((0))      # total blank line count
totexptestcnt=$((0))    # total expected test count
tottestcnt=$((0))       # total actual test count
totfailcnt=$((0))       # total fail count
toterrcnt=$((0))        # total error count
totfilefailcnt=$((0))   # total file fail count
totparamcnt=$((0))      # total number of command line arguments
grandfilecnt=$((0))     # grand total file count
grandtestcnt=$((0))     # grand total test count
granderrcnt=$((0))      # grand total error count
versionflag="n"         # "y" if --version specified else "n"
helpflag="n"            # "y" if --help specified else "n"
strictflag="y"          # "y" unless --nostrict specified (then "n")
debugflag="n"           # "n" unless --debug specified (then "y")
briefflag="n"           # "n" unless --brief specified (then "y")
tabchr=$'\x09'          # ascii tab character
spcchr=" "              # space character
sessionbegstamp=$(date +%FT%T%z)  # session begin timestamp
sessionbegepoch=$(date +%s)       # session begin epoch seconds

while [ $# -gt 0 ]; do
    totparamcnt=$(($totparamcnt+1))
    param="$1"
    shift
    if [[ "$param" == "--version"    || "$param" == "-v" ]]; then
        versionflag="y"
    elif [[ "$param" == "--help"     || "$param" == "-h" ]]; then
        helpflag="y"
    elif [[ "$param" == "--debug"    || "$param" == "-d" ]]; then
        debugflag="y"
    elif [[ "$param" == "--brief"    || "$param" == "-b" ]]; then
        briefflag="y"
    elif [[ "$param" == "--strict"   || "$param" == "-s" ]]; then
        strictflag="y"
    elif [[ "$param" == "--nostrict" || "$param" == "-n" ]]; then
        strictflag="n"
    elif [[ "${param:0:2}" == "--"   || "${param:0:1}" == "-" ]]; then
        echo "ERROR: bad command line option ($param)." >&2
        exit 1
    else
        # assume a file
        #if [ ! -e "$param" ]; then
        #    echo "ERROR: file not found ($param)." >&2
        #    exit 1
        #fi
        filespec=$(readlink -f "$param")    # full cannonical filespec
        filespecs+=("$filespec")
        totfilecnt=$(($totfilecnt+1))
    fi
done
#
# show version if it was requested
#
if [ "$versionflag" == "y" ]; then
    echo "$version"
    echo "Location: $cmdfile"
fi
#
# show help if it was requested
#
if [ "$helpflag" == "y" ]; then
    echo "Command:"
    echo "  $cmdname - Check TAP compliant unit test results"
    echo "Syntax:"
    echo "  $cmdname [<option>...] [<filespec>...] # read from stdin or files."
    echo "  $cmdname --help        # display this help text."
    echo "  $cmdname --version     # display program version information."
    echo "Options:"
    echo "  --strict   | -s   Use strict TAP parsing rules (default)."
    echo "  --nostrict | -n   Do not use strict TAP parsing rules."
    echo "  --brief    | -b   Do not display # error comment lines."
    echo "  --debug    | -d   Display debug info to stderr."
    echo "  --help     | -h   Display this help."
    echo "  --version  | -v   Display version information."
fi
#
# if --help or --version and no files specified, assume we are done.
#
if [[ "$versionflag" == "y" || "$helpflag" == "y" ]]; then
    if [ "$totfilecnt" == "0" ]; then
        exit 0
    fi
fi
#
# if no files specified then assume reading from stdin
#
if [ $totfilecnt -eq 0 ]; then
    filespecs+=("/dev/stdin")
    totfilecnt=$(($totfilecnt+1))
    totstdincnt=$(($totstdincnt+1))
fi
#
# output initial expected check test count line
#
expchecktestcnt=$(($totfilecnt+2))  # add 2 for TAPTOTAL and TAPGRAND
echo "1..$expchecktestcnt"
#
# now loop through and read all the files on the filespecs list
#
exitstatus="0"
idx=$((0))
while [ $idx -lt ${#filespecs[*]} ]; do
    filespec="${filespecs[$idx]}"
    idx=$(($idx+1)) 
    taperrs=()
    curtestcnt=$((0))
    curfailcnt=$((0))
    curerrcnt=$((0))
    curlinecnt=$((0))
    curxlinecnt=$((0))
    curblinecnt=$((0))
    curexptestcnt=$((0))
    curfirstexptestnum=""
    curlastexptestnum=""
    curfirstacttestnum=""
    curlastacttestnum=""
    toomanyexpectsflag="n"
    toomanyweirdlinesflag="n"
    outofsequenceflag="n"
    if [ ! -e "$filespec" ]; then
        taperrs+=("# File not found.")
    else
        prevtstnum=""
        while read line; do
            line="${line/$tabchr/$spcchr}"   # replace tabs with spaces
            line="${line##*( )}"             # trim leading spaces
            line="${line%%*( )}"             # trim trailing spaces
            curlinecnt=$((curlinecnt+1))
            totlinecnt=$((totlinecnt+1))
            if [[ "$line" =~ ^[0-9]+\.\.[0-9]+$ ]]; then
                if [ "$strictmode" == "y" -a "$curfirstexptestnum" != "" ]; then
                    ct_debug "$filespec line $curlinecnt: extra expected testcount line."
                    if [ "$toomanyexpectsflag" == "n" ]; then
                        toomanyexpectsflag="y"
                        taperrs+=("# Found too many expected testcount lines.")
                    fi
                fi
                curfirstexptestnum="${line%%\.\.*}"
                curlastexptestnum="${line##*\.\.}"
                curexptestcnt=$(($curlastexptestnum-$curfirstexptestnum))
                curexptestcnt=$(($curexptestcnt+1))
            elif [ "${line:0:3}" == "ok " ]; then
                # pass report
                check_for_previous_tapgrand "$line"
                rest="${line:3}"
                rest="${rest##*( )}"             # trim leading spaces
                tstnum="${rest%% *}"
                if [ "$curfirstacttestnum" == "" ]; then
                    curfirstacttestnum="$tstnum"
                fi
                curlastacttestnum="$tstnum"
                curtestcnt=$(($curtestcnt+1))
                tottestcnt=$(($tottestcnt+1))
                if [[ "$prevtstnum" != "" && "$strictflag" == "y" ]]; then
                    tstnumincr=$(($tstnum-$prevtstnum))
                    if [[ $tstnumincr -ne 1 ]]; then
                        if [ "$outofsequenceflag" == "n" ]; then
                            taperrs+=("# Found out of sequence test numbers (e.g. $tstnum).")
                            outofsequenceflag="y"
                        fi
                        ct_debug "Test $tstnum is out of sequence."
                    fi
                fi
                prevtstnum="$tstnum"   # save previous test number
            elif [ "${line:0:7}" == "not ok " ]; then
                # fail report
                check_for_previous_tapgrand "$line"
                rest="${line:7}"
                rest="${rest##*( )}"             # trim leading spaces
                tstnum="${rest%% *}"
                if [ "$curfirstacttestnum" == "" ]; then
                    curfirstacttestnum="$tstnum"
                fi
                curlastacttestnum="$tstnum"
                curtestcnt=$(($curtestcnt+1))
                curfailcnt=$(($curfailcnt+1))
                tottestcnt=$(($tottestcnt+1))
                totfailcnt=$(($totfailcnt+1))
                if [[ "$prevtstnum" != "" && "$strictflag" == "y" ]]; then
                    tstnumincr=$(($tstnum-$prevtstnum))
                    if [[ $tstnumincr -ne 1 ]]; then
                        if [ "$outofsequenceflag" == "n" ]; then
                            taperrs+=("# Found out of sequence test numbers (e.g. $tstnum).")
                            outofsequenceflag="y"
                        fi
                        ct_debug "Test $tstnum is out of sequence."
                    fi
                fi
                prevtstnum="$tstnum"   # save previous test number
            elif [ "${line:0:1}" == "#" ]; then
                # strictly valid extra comment
                curxlinecnt=$(($curxlinecnt+1))
                totxlinecnt=$(($totxlinecnt+1))
            elif [ "$line" eq "" ]; then
                # blank line, ok even in strict
                curblinecnt=$(($curblinecnt+1))
                totblinecnt=$(($totblinecnt+1))
            else
                # not a strictly formatted line
                if [ "$strictflag" == "y" ]; then
                    ct_debug "$filespec line $curlinecnt: not strictly TAP formatted line."
                    if [ "$toomanyweirdlinesflag" == "n" ]; then
                        toomanyweirdlinesflag="y"
                        taperrs+=("# Found not strictly TAP format lines (e.g. line $curlinecnt).")
                    fi
                else
                    curxlinecnt=$(($curxlinecnt+1))
                    totxlinecnt=$(($totxlinecnt+1))
                fi
            fi
        done < "$filespec"
        # check that we got actually found the right number of test reports
        if [[ $curtestcnt -ne $curexptestcnt ]]; then
            errmsg="# Wrong number of actual tests, "
            errmsg+="expected $curexptestcnt, found $curtestcnt"
            taperrs+=("$errmsg")
        fi
    fi
    totexptestcnt=$(($totexptestcnt+$curexptestcnt))
    ct_debug "File=$filespec"
    ct_debug "  FileTestCount=$curtestcnt"
    ct_debug "  FileFailCount=$curfailcnt"
    ct_debug "  FileExpectedTestCount=$curexptestcnt"
    ct_debug "  FileExpectedFirstTestNumber=$curfirstexptestnum"
    ct_debug "  FileExpectedLastTestNumber=$curlastexptestnum"
    ct_debug "  FileActualFirstTestNumber=$curfirstacttestnum"
    ct_debug "  FileActualLastTestNumber=$curlastacttestnum"
    ct_debug "  FileLineCount=$curlinecnt"
    ct_debug "  FileXtraLineCount=$curxlinecnt"
    ct_debug "  FileBlankLineCount=$curblinecnt"
    if [[ $curtestcnt -le 0 ]]; then
        taperrs+=("# No test reports found.")
    else
        if [[ $curfailcnt -gt 0 ]]; then
            if [[ $curfailcnt -eq 1 ]]; then
                taperrs+=("# Found $curfailcnt failed test.")
            else
                taperrs+=("# Found $curfailcnt failed tests.")
            fi
        fi
        if [[ $curtestcnt -lt $curexptestcnt ]]; then
            tapmisscnt=$(($curexptestcnt-$curtestcnt))
            if [[ $tapmisscnt -eq 1 ]]; then
                taperrs+=("# Missing $tapmisscnt test.")
            else
                taperrs+=("# Missing $tapmisscnt tests.")
            fi
        elif [[ $curtestcnt -lt $curexptestcnt ]]; then
            tapxtracnt=$(($curtestcnt-$curexptestcnt))
            if [[ $tapxtracnt -eq 1 ]]; then
                taperrs+=("# Found $tapmisscnt extra unexpected test.")
            else
                taperrs+=("# Found $tapmisscnt extra unexpected tests.")
            fi
        fi
    fi
    curerrcnt="${#taperrs[@]}"
    toterrcnt=$(($toterrcnt+$curerrcnt))
    #
    # output single log file summary TAP report
    #
    if [[ ${#taperrs[@]} -eq 0 ]]; then 
        tapprefix="ok"
    else
        exitstatus="1"
        tapprefix="not ok"
    fi
    testword="test"
    if [[ $curtestcnt -ne 1 ]]; then testword+="s"; fi
    errorword="error"
    if [[ $curerrcnt -ne 1 ]]; then errorword+="s"; fi
    echo "$tapprefix $idx [TAPFILE: '$filespec' $curtestcnt $testword, $curerrcnt $errorword]"
    #
    # output commented error descriptions if any, unless in brief mode
    #
    if [ "$briefflag" == "n" ]; then
        erridx=0
        while [ $erridx -lt ${#taperrs[@]} ]; do
            echo "${taperrs[$erridx]}"
            erridx=$(($erridx+1))
        done
    fi
done
#
sessionendstamp=$(date +%FT%T%z)
sessionendepoch=$(date +%s)
sessiondeltaepoch=$((($sessionendepoch-$sessionbegepoch)+1))
ct_debug "TotalFileCount=$totfilecnt"
ct_debug "TotalFileFailCount=$totfilefailcnt"
ct_debug "TotalTestCount=$tottestcnt"
ct_debug "TotalFailCount=$totfailcnt"
ct_debug "TotalErrorCount=$toterrcnt"
ct_debug "TotalExpectedTestCount=$totexptestcnt"
ct_debug "TotalLineCount=$totlinecnt"
ct_debug "TotalXtraLineCount=$totxlinecnt"
ct_debug "TotalBlankLineCount=$totblinecnt"
ct_debug "SessionBeginTimestamp=$sessionbegstamp"
ct_debug "SessionEndTimestamp=$sessionendstamp"
ct_debug "AppoximateRuntimeSeconds=$sessiondeltaepoch"
ct_debug "final exit status will be $exitstatus."
ct_debug "Finished scanning at $sessionendstamp."
#
# output multi-file summary
#
idx=$(($idx+1))
tapprefix="ok"
if [[ $toterrcnt -gt 0 ]]; then tapprefix="not ok"; fi
errorword="error"
if [[ $toterrcnt -ne 1 ]]; then errorword+="s"; fi
fileword="logfile"
if [[ $totfilecnt -ne 1 ]]; then fileword+="s"; fi
testword="test"
if [[ $tottestcnt -ne 1 ]]; then testword+="s"; fi
report="$tapprefix $idx [TAPTOTAL: $totfilecnt $fileword, "
report+="$tottestcnt $testword, $toterrcnt $errorword]"
echo "$report"
#
# output grand total summary (includes indirect TAPTOTAL reports)
#
grandfilecnt=$(($grandfilecnt+$totfilecnt))
grandtestcnt=$(($grandtestcnt+$tottestcnt))
granderrcnt=$(($granderrcnt+$toterrcnt))
idx=$(($idx+1))
tapprefix="ok"
if [[ $granderrcnt -gt 0 ]]; then tapprefix="not ok"; fi
errorword="error"
if [[ $granderrcnt -ne 1 ]]; then errorword+="s"; fi
fileword="logfile"
if [[ $grandfilecnt -ne 1 ]]; then fileword+="s"; fi
testword="test"
if [[ $grandtestcnt -ne 1 ]]; then testword+="s"; fi
report="$tapprefix $idx [TAPGRAND: $grandfilecnt $fileword, "
report+="$grandtestcnt $testword, $granderrcnt $errorword]"
echo "$report"
#
# all done
#
exit $exitstatus
