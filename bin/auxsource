##############################################################################
# Name:
#   auxsource - Enhanced source capability
#
# Introduction:
# auxsource is a sourceable bash script which extends the capabilities
# of the built-in bash command "source". Its primary feature is that
# if a relative file specification is specified (a filename with no
# directory or a relative directory) then it will search through 
# a path-list (using the PATH environment variable by default) and
# source the first match found. This makes working with sourceable
# scripts a little more like working with executable scripts or programs.
#
# auxsource uses the auxwhere executable script (also part of the auxilium
# distribution) to find the exact file to be sourced. Command line parameters
# on the auxsource command line cannot be passed to auxwhere because they
# are reserved for use by whatever sourceable script is being invoked. However,
# the "AUXSOURCE_OPTIONS" environment variable may be set to whatever auxwhere
# options are desired. This allows full control over how sourceable files are
# located.
# 
# Usage:
#   auxsource <file> [<arg>...]
#   auxsource -h | --help
#   auxsource -v | --version
#
# Options and Commands:
#   See "help" section in code (or the man page).
#
# Copyright:
#   auxenv Copyright Â© 2017 Eric Alan Christiansen.
#
# Legal:
#   This program comes with ABSOLUTELY NO WARRANTY.
#   This is free software, and you are welcome to use and/or redistribute it
#   under the conditions of the GNU General Public License v3.0.
#   (See https://www.gnu.org/licenses/gpl-3.0.en.html)
#
# More Information:
#   - auxilium - See https://github.com/ericmotleybytes/auxilium.
#
# Requirements:
#   - bash version 4.2 or higher.
##############################################################################
#
# define all logic in a function to isolate local variables
#
function aux_error() {
    msg="$1"
    echo "ERROR: ($scriptname) $msg" >&2
    return 1
}
function auxsource_main_func() {
    local scriptspec=$(readlink -f "${BASH_SOURCE[0]}")  # full spec
    local scriptname=$(basename "$scriptspec")           # basename part
    local scriptdir=$(dirname "$scriptspec")             # dirpart
    local version="${scriptname}: version 2.2 (2017-07-08)"
    local param
    local sourcefile=""
    local sourceargs=()
    # do help if appropriate
    if [[ $# -le 1 ]]; then
        if [[ "$#" == "0" || "$1" == "-h" || "$1" == "--help" ]]; then
            echo "Command:"
            echo "  $scriptname <filename> [<arg> ...] # source found file with specified args."
            echo "  $scriptname -h | --help            # display help."
            echo "  $scriptname -v | --version         # display version."
            echo ""
            echo "Note: The AUXSOURCE_OPTIONS environment variable may be used to control"
            echo "      the embedded auxwhere invocation."
            return 0
        fi
    fi
    # do version if appropriate
    if [[ $# -eq 1 ]]; then
        if [[ "$1" == "-v" || "$1" == "--version" ]]; then
            echo "$version"
            echo "Location: $scriptspec"
            return 0
        fi
    fi
    # shift away "--" if found
    if [[ "$1" == "--" ]]; then
        shift
    fi
    # parse the sourcing stuff
    for param in "$@"; do
        if [[ -z "$sourcefile" ]]; then
            sourcefile="$param"
        else
           sourceargs+=("$param")
        fi
    done
    if [[ -z "$sourcefile" ]]; then
        aux_error "No source file specified."
        return 1
    fi
    # invoke auxwhere to find sourcefile
    local whereparams=""
    if [ -z "$AUXSOURCE_OPTIONS" ]; then
        whereparams="\"$sourcefile\""
    else
        whereparams="$AUXSOURCE_OPTIONS \"$sourcefile\""
    fi
    local sourcespec=""
    eval set -- $(echo "$whereparams")
    sourcespec=$(source "$scriptdir/auxwhere")
    if [ -z "$sourcespec" ]; then
        aux_error "File not found ($sourcefile)."
        return 1
    fi
    # source the sourcefile
    local args=""
    for arg in "${sourceargs[@]}"; do
        args="$args \"$arg\""
    done
    eval set -- $(echo "$args")
    source "$sourcespec"
    return $?
}
#
# Now invoke the main function
#
auxsource_main_func "$@"
if [ "$?" == "0" ]; then
    unset auxsource_main_func
    true  # final status
else
    unset auxsource_main_func
    false # final status
fi
