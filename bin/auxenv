# auxenv - A "sourceable" bash script to show and setup environment variables
#
# define all logic in functions to isolate local variables
#
function auxenv_version_func() {
    local scriptname=${BASH_SOURCE[0]##*/}  # just keep basename part
    echo "$scriptname version 2.1 (2017-06-27)"
    return 0
}
function auxenv_help_func() {
    echo "Command:"
    echo "  $scriptname - A sourceable bash script to display/setup environment variables."
    echo "Syntax:"
    echo "  $scriptname --help     # display usage help"
    echo "  $scriptname --version  # display version information"
    echo "  $scriptname [<switch>...] <envname> <command> [<parameter>...]"
    echo "Optional Switches:"
    echo "  --unsetempty  # if final environment variable value is \"\", also unset it."
    echo "  --ifs=\"<char>\" # list separator to use when parsing path-like env var values."
    echo "  --ifs=x<hh>  # specify --ifs char in hex, e.g., \"--ifs=x20\" for space."
    echo "Commands and Parameters:"
    echo "  show    <envname>             # display environment var readably."
    echo "  dump    <envname>             # display environment var basically."
    echo "  count   <envname> [<dir>]     # count all entries of occurances of dir."
    echo "  get     <envname> <pos>       # get entry at position."
    echo "  find    <envname> <dir>       # get position of directory."
    echo "  prepend <envname> <dir>       # prepend directory to env var."
    echo "  append  <envname> <dir>       # prepend directory to env var."
    echo "  insert  <envname> <dir> before <olddir> # add dir before olddir."
    echo "  insert  <envname> <dir> after  <olddir> # add dir after olddir."
    echo "  insert  <envname> <dir> before <pos>    # add dir before position."
    echo "  insert  <envname> <dir> after  <pos>    # add dir after position."
    echo "  remove  <envname> <dir> [<n>] # remove dir and equiv up to n times."
    echo "  erase   <envname> <dir> [<n>] # remove literal dir up to n times."
    echo "  reverse <envname>             # reverse order of all entries."
    echo "  dedup   <envname> [topdown|bottonup]    # deduplicate, topdown (D) or bottomup."
    echo "  desym   <envname>             # dereference all symbolic links."
    echo "  weed    <envname>             # weed directories that do not exist."
    echo "  clean   <envname>             # does desym, dedup, and weed in one step."
    return 0
}
function auxenv_badusage_func() {
    local scriptname=${BASH_SOURCE[0]##*/}  # just keep basename part
    echo "ERROR: $scriptname command line usage error, try --help for syntax." >&2
    return 1
}
function auxenv_main_func() {
    local scriptname
    local scriptspec
    local action
    local envname
    local part
    local subpart
    local newdir
    local olddir
    local altdir
    local result
    local cnt
    local dupflag
    local foundflag
    local existsflag
    local intflag
    local insertedflag
    local befaft
    local re
    local tgtcnt
    local remcnt
    local workpath
    local revflag
    local dupdir
    #
    # initialize special vars IFS
    #
    local genifs=" " # space, such as between command line arguments
    local envifs=":" # colon, such as between directories in PATH environment variable
    local IFS="$genifs"
    local unsetflag="n"
    local eraseflag="n"
    #
    # get base script name
    #
    scriptname=${BASH_SOURCE[0]##*/}  # just keep basename part
    scriptspec=${BASH_SOURCE[0]}      # full spec
    #
    # provide help by default
    #
    if [ "$#" == "0" ]; then
        auxenv_help_func
        return 0
    fi
    #
    # look for optional initial switches (--ifs=":" ; --unsetempty; --version ; --help)
    #
    while [[ $# -gt 0 && "${1:0:2}" == "--" ]]; do
        local switch="$1"
        shift
        if [ "$switch" == "--version" ]; then
            if [ "$#" == "0" ]; then
                auxenv_version_func
                return 0
            else
                auxenv_badusage_func
                return 1
            fi
        elif [ "$switch" == "--help" ]; then
            if [ "$#" == "0" ]; then
                auxenv_help_func
                return 0
            else
                auxenv_badusage_func
                return 1
            fi
        elif [ "$switch" == "--unsetempty" ]; then
            unsetflag="y"
        elif [ "${switch:0:6}" == "--ifs=" ]; then
            envifs="${switch:6}"
            if [[ "$envifs" =~ ^[Xx][0-9A-Fa-f]{2}$ ]]; then
                envifs="${envifs:1:2}"
                envifs="envifs=$'\\x${envifs}'"
                eval $envifs
            elif [ "${#envifs}" != "1" ]; then
                echo "ERROR: Bad length; --ifs="c" must specify exactly one character." >&2
                return 1
            fi
        else
            auxenv_badusage_func
            return 1
        fi
    done
    #
    # parse what is left of positional parameters
    #
    if [ "$#" == "0" ]; then
        auxenv_badusage_func
        return 1
    fi
    action="$1"
    if [ -z "$action" ]; then action="help"; fi
    action=${action,,}   # lowercase action
    #
    # check for special "erase" option
    #
    eraseflag="n"
    if [ "$action" == "erase" ]; then
        action="remove"
        eraseflag="y"
    fi
    #
    # do appropriate action
    #
    if [ "$action" == "show" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname missing environment variable name parameter." >&2
            return 1
        fi
        if [ ! -z "$3" ]; then
            echo "ERROR: $scriptname too many command line parameters." >&2
            return 1
        fi
        echo "**** $envname is set to:"
        echo "${!envname}"
        IFS="$envifs"
        cnt="0"
        for part in ${!envname}; do
            let cnt=$cnt+1
            if [ "$cnt" == "1" ]; then echo "** Part breakdown:"; fi
            echo "  $cnt=$part"
        done
        return 0
    elif [ "$action" == "dump" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname missing environment variable name parameter." >&2
            return 1
        fi
        if [ ! -z "$3" ]; then
            echo "ERROR: $scriptname too many command line parameters." >&2
            return 1
        fi
        IFS="$envifs"
        cnt="0"
        for part in ${!envname}; do
            let cnt=$cnt+1
            echo "$part"
        done
        return 0
    elif [ "$action" == "append" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname missing environment variable name parameter." >&2
            return 1
        fi
        newdir="$3"
        if [ -z "$newdir" ]; then
            echo "ERROR: $scriptname missing new directory parameter." >&2
            return 1
        fi
        if [ ! -z "$4" ]; then
            echo "ERROR: $scriptname too many command line parameters." >&2
            return 1
        fi
        if [ -z "${!envname}" ]; then
            export $envname="$newdir"
        else
            export $envname="${!envname}${envifs}$newdir"
        fi
        return 0
    elif [ "$action" == "prepend" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname missing environment variable name parameter." >&2
            return 1
        fi
        newdir="$3"
        if [ -z "$newdir" ]; then
            echo "ERROR: $scriptname missing new directory parameter." >&2
            return 1
        fi
        if [ ! -z "$4" ]; then
            echo "ERROR: $scriptname too many command line parameters." >&2
            return 1
        fi
        if [ -z "${!envname}" ]; then
            export $envname="$newdir"
        else
            export $envname="$newdir${envifs}${!envname}"
        fi
        return 0
    elif [ "$action" == "remove" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname Missing environment variable name parameter." >&2
            return 1
        fi
        newdir="$3"
        if [ -z "$newdir" ]; then
            echo "ERROR: $scriptname Missing directory to remove parameter." >&2
            return 1
        fi
        tgtcnt="$4"
        if [ -z "$tgtcnt" ]; then
            let tgtcnt=999999
        else
            re='^[0-9]+$'
            if [[ ! $tgtcnt =~ $re ]]; then
                echo "ERROR: $scriptname Count parameter must be positive integer." >&2
                return 1
            fi
        fi
        if [ ! -z "$5" ]; then
            echo "ERROR: $scriptname Too many command line parameters." >&2
            return 1
        fi
        if [ "$newdir" == "." ]; then
            eraseflag="y"    # only do literal remove for "."
        fi
        if [ "$eraseflag" == "y" ]; then
            # do literal remove only, do not look for cannonical equivalents
            altdir="" # should always not match
        else
            # remove literal and cannonical equivalent, if it exists
            if [ -e "$newdir" ]; then
                altdir=$(readlink -f "$newdir")
            else
                altdir="" # should always not match
            fi
        fi
        result=""
        IFS="$envifs"
        remcnt="0"
        for part in ${!envname}; do
            if [ "$part" != "$newdir" -a "$part" != "$altdir" ]; then
                # no match, keep dir
                result="$result${envifs}$part"
            else
                # matched one or the other, skip unless count exceeded
                if [ "$remcnt" -ge "$tgtcnt" ]; then
                    result="$result${envifs}$part"
                else
                    let remcnt=$remcnt+1
                fi
            fi
        done
        result=${result:1}  # strip leading :
        export $envname="$result"
        if [[ "$unsetflag" == "y" && -z ${!envname} ]]; then unset $envname; fi
        return 0
    elif [ "$action" == "dedup" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname Missing environment variable name parameter." >&2
            return 1
        fi
        dupdir="$3"
        if [ -z "$dupdir" ]; then dupdir="topdown"; fi    # default
        if [[ "$dupdir" != "topdown" && "$dupdir" != "bottomup" ]]; then
            echo "ERROR: $scriptname Bad dup direction, must be 'topdown' or 'bottonup'." >&2
            return 1
        fi
        if [ ! -z "$4" ]; then
            echo "ERROR: $scriptname Too many command line parameters." >&2
            return 1
        fi
        result=""
        IFS="$envifs"
        revflag="n"
        workpath=${!envname}
        if [ "$dupdir" == "bottomup" ]; then
            revflag="y"
            workpath=""
            for part in ${!envname}; do
                # reverse order
                workpath="$part${envifs}$workpath"
            done
            workpath=${workpath::-1}  # trim trailing :
        fi
        result=""
        for part in ${workpath}; do
            dupflag="n"
            for subpart in $result; do
                if [ "$part" == "$subpart" ]; then
                    dupflag="y"
                    break
                fi
            done
            if [ "$dupflag" == "n" ]; then
                result="$result${envifs}$part"
            fi
        done
        result=${result:1}  # strip leading :
        if [ "$revflag" == "y" ]; then
            # reverse back
            workpath="$result"
            result=""
            for part in ${workpath}; do
                result="$part${envifs}$result"
            done
            result=${result::-1}  # trim trailing :
        fi
        export $envname="$result"
        return 0
    elif [ "$action" == "desym" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname Missing environment variable name parameter." >&2
            return 1
        fi
        if [ ! -z "$4" ]; then
            echo "ERROR: $scriptname Too many command line parameters." >&2
            return 1
        fi
        cnt="0"
        result=""
        workpath=${!envname}
        IFS="$envifs"
        for part in ${workpath}; do
            # try to dereference unless part is "." (current directory)
            if [ "$part" != "." ]; then
                part=$(readlink -f "$part")
            fi
            result="$result${envifs}$part"
        done
        result=${result:1}  # strip leading :
        export $envname="$result"
        return 0
    elif [ "$action" == "weed" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname Missing environment variable name parameter." >&2
            return 1
        fi
        if [ ! -z "$3" ]; then
            echo "ERROR: $scriptname Too many command line parameters." >&2
            return 1
        fi
        result=""
        IFS="$envifs"
        for part in ${!envname}; do
            existsflag="n"
            if [ -d "$part" ]; then
                if [ -z "$result" ]; then
                    result="$part"
                else
                    result="$result${envifs}$part"
                fi
            fi
        done
        export $envname="$result"
        return 0
    elif [ "$action" == "insert" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname Missing environment variable name parameter." >&2
            return 1
        fi
        newdir="$3"
        if [ -z "$newdir" ]; then
            echo "ERROR: $scriptname Missing new directory parameter." >&2
            return 1
        fi
        befaft="$4"
        if [ -z "$befaft" ]; then
            echo "ERROR: $scriptname Missing before|after parameter." >&2
            return 1
        fi
        befaft=${befaft,,}  # lowercase
        if [ "$befaft" != "before" ]; then
            if [ "$befaft" != "after" ]; then
                echo "ERROR: $scriptname before|after parameter not before or after."
                return 1
            fi
        fi
        olddir="$5"
        if [ -z "$olddir" ]; then
            echo "ERROR: $scriptname Missing existing directory parameter." >&2
            return 1
        fi
        if [ ! -z "$6" ]; then
            echo "ERROR: $scriptname Too many command line parameters." >&2
            return 1
        fi
        insertedflag="n"
        re='^[0-9]+$'
        intflag="n"
        if [[ $olddir =~ $re ]]; then
            intflag="y"
            tgtcnt="$olddir"
        fi
        result=""
        IFS="$envifs"
        cnt="0"
        for part in ${!envname}; do
            let cnt=$cnt+1
            if [ "$insertedflag" == "y" ]; then
                result="$result${envifs}$part"
            else
                if [ "$intflag" == "y" ]; then
                    if [ "$cnt" -gt "$tgtcnt" ]; then
                        result="$result${envifs}$newdir${envifs}$part"
                        insertedflag="y"
                    elif [ "$cnt" -eq "$tgtcnt" ]; then
                        if [ "$befaft" == "before" ]; then
                            result="$result${envifs}$newdir${envifs}$part"
                        else
                            result="$result${envifs}$part${envifs}$newdir"
                        fi
                        insertedflag="y"
                    else
                        result="$result${envifs}$part"
                    fi
                else
                    if [ "$part" == "$olddir" ]; then
                        if [ "$befaft" == "before" ]; then
                            result="$result${envifs}$newdir${envifs}$part"
                        else
                            result="$result${envifs}$part${envifs}$newdir"
                        fi
                        insertedflag="y"
                    else
                        result="$result${envifs}$part"
                    fi
                fi
            fi
        done
        if [ "$insertedflag" == "n" ]; then result="$result${envifs}$newdir"; fi
        if [ "${result:0:1}" == "$envifs" ]; then result="${result:1}"; fi
        export $envname="$result"
        return 0
    elif [ "$action" == "count" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname Missing environment variable name parameter." >&2
            return 1
        fi
        olddir="$3"   # optional
        if [ ! -z "$4" ]; then
            echo "ERROR: $scriptname Too many command line parameters." >&2
            return 1
        fi
        IFS="$envifs"
        cnt="0"
        for part in ${!envname}; do
            if [ -z "$olddir" ]; then
                let cnt=$cnt+1
            else
                if [ "$part" == "$olddir" ]; then
                    let cnt=$cnt+1
                fi
            fi
        done
        echo "$cnt"
        return 0
    elif [ "$action" == "find" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname Missing environment variable name parameter." >&2
            return 1
        fi
        olddir="$3"
        if [ -z "$olddir" ]; then
            echo "ERROR: $scriptname Missing directory parameter." >&2
            return 1
        fi
        if [ ! -z "$4" ]; then
            echo "ERROR: $scriptname Too many command line parameters." >&2
            return 1
        fi
        IFS="$envifs"
        cnt="0"
        tgtcnt=""
        for part in ${!envname}; do
            let cnt=$cnt+1
            if [ "$part" == "$olddir" ]; then
                tgtcnt="$cnt"
                break
            fi
        done
        echo "$tgtcnt"
        return 0
    elif [ "$action" == "get" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname Missing environment variable name parameter." >&2
            return 1
        fi
        tgtcnt="$3"
        if [ -z "$tgtcnt" ]; then
            echo "ERROR: $scriptname Missing position parameter." >&2
            return 1
        fi
        if [ ! -z "$4" ]; then
            echo "ERROR: $scriptname Too many command line parameters." >&2
            return 1
        fi
        re='^[0-9]+$'
        if [[ $tgtcnt =~ $re ]]; then
            intflag="y"
        else
            intflag="n"
            echo "ERROR: $scriptname Position parameter must be an integer." >&2
            return 1
        fi
        IFS="$envifs"
        cnt="0"
        for part in ${!envname}; do
            let cnt=$cnt+1
            if [ "$cnt" -eq "$tgtcnt" ]; then
                echo "$part"
                break
            fi
        done
        return 0
    elif [ "$action" == "reverse" ]; then
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname Missing environment variable name parameter." >&2
            return 1
        fi
        if [ ! -z "$3" ]; then
            echo "ERROR: $scriptname Too many command line parameters." >&2
            return 1
        fi
        result=""
        IFS="$envifs"
        for part in ${!envname}; do
            result="$part${envifs}$result"
        done
        if [ ! -z "$result" ]; then
            result=${result::-1}  # trim trailing :
            export $envname="$result"
        fi
        return 0
    elif [ "$action" == "clean" ]; then
        # does desym, dedup, and weed in one step."
        envname="$2"
        if [ -z "$envname" ]; then
            echo "ERROR: $scriptname Missing environment variable name parameter." >&2
            return 1
        fi
        if [ ! -z "$3" ]; then
            echo "ERROR: $scriptname Too many command line parameters." >&2
            return 1
        fi
        set --  # clear positional parameters
        source "$scriptspec" desym $envname
        source "$scriptspec" dedup $envname
        source "$scriptspec" weed  $envname
        return 0
    else
        echo "ERROR: $scriptname Unrecognized command line action specified ($action)." >&2
        return 1
    fi
}
#
# Now invoke the main function
#
auxenv_main_func $@
if [ "$?" == "0" ]; then
    unset auxenv_version_func
    unset auxenv_help_func
    unset auxenv_badusage_func
    unset auxenv_main_func
    true  # final status
else
    unset auxenv_version_func
    unset auxenv_help_func
    unset auxenv_badusage_func
    unset auxenv_main_func
    false # final status
fi
