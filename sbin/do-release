#!/usr/bin/env bash
#
# This script is for auxilium source developers only.
# It facilitates making a new GitHub release.
#
# usage:
#     do-release [options]
# options:
#     -v --version # display version info
#     -h --help    # display help info
#     -w --warn    # display warning messages to stderr
#     -b --verbose # display additional information
#     -d --debug   # display debug messages to stderr
#
# define functions
#
function aux_debug() {
    if [ "$debugflag" == "y" ]; then
        echo "DEBUG: $1" >&2
    fi
    return 0
}
function aux_checkpass() {
    checkcnt=$(($checkcnt+1))
    if [ "$verboseflag" == "y" ]; then
        echo "OK $checkcnt CHECK: $1"
    fi
    return 0
}
function aux_checkfail() {
    checkcnt=$(($checkcnt+1))
    checkcnt=$(($checkcnt+1))
    echo "NOT OK $checkcnt CHECK: $1"
    return 0
}
function aux_warn() {
    warncnt=$(($warncnt+1))
    if [ "$warnflag" == "y" ]; then
        echo "WARNING: ($warncnt) $1" >&2
    fi
    return 0
}
function aux_error() {
    errorcnt=$(($errorcnt+1))
    echo "ERROR: ($errorcnt) $1" >&2
    return 0
}
function aux_die() {
    msg="$1"
    aux_error "$msg"
    exit 1
}
function aux_info() {
    echo "INFO: $1"
    return 0
}
function aux_notice() {
    echo "NOTICE: $1"
    return 0
}
function ask_yn() {
    yn_answer="$1"    # auto answer
    local question="$2"
    local answer=""
    if [ -z "$yn_answer" ]; then
        yn_answer="n"
    fi
    if [[ "$yn_answer" != "y" && "$yn_answer" != "n" ]]; then
        aux_die "Auto answer specified is not y or n."
    fi
    if [ "$interactiveflag" == "y" ]; then
        while true; do
            read -p "$question [yn]: " answer
            case $answer in
                [Yy]* ) yn_answer="y"; break;;
                [Nn]* ) yn_answer="n"; break;;
                * ) echo "Please answer yes or no.";;
            esac
        done
    else
        aux_info "$question [yn]? was auto answered with $yn_answer."
    fi
    return 0
}
function zero_or_die() {
    local zod_stat="$1"
    local zod_msg="$2"
    if [ -z "$zod_msg" ]; then
        zod_msg="Status '$zod_stat' is not '0'."
    fi
    if [ "$zod_stat" != "0" ]; then
        aux_die "$zod_msg"
    fi
    return 0
}
function y_or_die() {
    local yod_val="$1"
    local yod_msg="$2"
    if [ -z "$yod_val" ]; then
        yod_val="$yn_answer"  # yn_answer set by ask_yn function
    fi
    if [ -z "$yod_msg" ]; then
        yod_msg="Value '$yod_val' is not 'y'."
    fi
    if [ "$yod_val" != "y" ]; then
        aux_die "$yod_msg"
    fi
    return 0
}
function check_show_version() {
    if [ "$versionflag" == "y" ]; then
        echo "$version"
    fi
}
function check_show_help() {
    if [ "$helpflag" == "y" ]; then
        echo "Syntax:"
        echo "  $cmdname [<option>...]   # do a GitHub release."
        echo "Options:"
        echo "  -b --verbose  # display extra info."
        echo "  -w --warn     # output non-fatal warnings to stderr."
        echo "  -d --debug    # output debug info to stderr."
        echo "  -h --help     # display help"
        echo "  -v --version  # display version"
    fi
}
function check_early_exit() {
    # exit now if -h or -v
    #
    # if --help or --version and no files specified, assume we are done.
    #
    if [[ "$versionflag" == "y" || "$helpflag" == "y" ]]; then
        exit 0
    fi
}
function verify_on_master_branch() {
    branch=$(git status --porcelain --branch | grep -e '^##\ ' | head -1)
    branch="${branch:3}"
    branch="${branch%%\ *}"
    branchok="n"
    aux_debug "branch=$branch."
    if [ "$branch" == "master...origin/master" ]; then
        branchok="y"
    elif [ "$branch" == "master" ]; then
        branchok="y"
    else
        aux_die "Unexpected branch ($branch)."
    fi
    aux_info "$branch is the current git branch."
}
function verify_makefile_exists() {
    # make sure makefile exists
    makefile="$reporoot/Makefile"
    aux_debug "makefile=$makefile."
    if [ ! -e "$makefile" ]; then
       aux_die "Makefile ($makefile) not found."
    fi
    aux_checkpass "Makefile ($makefile) found."
}
function get_release_version() {
    # get this release number
    thisrel=$("$reporoot/sbin/show-release" --current)
    if [ -z "$thisrel" ]; then
        aux_die "current this release could not be read."
    fi
    aux_info "$thisrel is the current release (to be built)."
}
function get_local_release_numbers() {
    # get local release versions
    localrels=$(git tag --list | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V)
    readarray -t locrelarr < <(echo "$localrels")
}
function get_last_existing_local_release_version() {
    # get the last existing local release version
    lastlocalrel=$(echo "$localrels" | tail -1)
    aux_info "$lastlocalrel is the last local release tag found."
    if [ "$thisrel" == "lastlocalrel" ]; then
        aux_die "This release tag ($thisrel) already used locally."
    fi
}
function get_remote_release_numbers() {
    # get remote existing release versions
    remoterels=$(git ls-remote --tags origin)
    remoterels=$(echo "$remoterels" | grep -E 'refs/tags/[0-9]+\.[0-9]+\.[0-9]+$')
    remoterels=$(echo "$remoterels" | sed 's#^.*refs/tags/##')
    remoterels=$(echo "$remoterels" | sort -V)
    readarray -t remrelarr < <(echo "$remoterels")
}
function get_last_existing_remote_release_version() {
    # get the last existing remote release number
    tmpvar=$(git ls-remote --tags origin)
    tmpvar=$(echo "$tmpvar" | grep -E 'refs/tags/[0-9]+\.[0-9]+\.[0-9]+$')
    tmpvar=$(echo "$tmpvar" | sed 's#^.*refs/tags/##')
    tmpvar=$(echo "$tmpvar" | sort -V)
    lastremoterel=$(echo "$remoterels" | tail -1)
    aux_info "$lastremoterel is the last remote release tag found."
    if [ "$thisrel" == "lastremoterel" ]; then
        aux_die "This release tag ($thisrel) already used remotely."
        exit 1
    fi
}
function check_release_version_not_used_on_remote() {
    # check that thisrel not used on remote
    usedonrem="n"
    for rel in "${remrelarr[@]}"; do
        if [ "$thisrel" == "$rel" ]; then
            usedonrem="y"
            break
        fi
    done
    if [ "$usedonrem" == "y" ]; then
        aux_die "This release $thisrel already used on git remote."
        exit 1
    fi
    aux_info "This release $thisrel is not yet used on git remote."
}
function check_release_version_not_used_on_local() {
    # check that thisrel not used on local
    usedonloc="n"
    for rel in "${locrelarr[@]}"; do
        if [ "$thisrel" == "$rel" ]; then
            usedonloc="y"
            break
        fi
    done
    if [ "$usedonloc" == "y" ]; then
        aux_notice "This release $thisrel already used locally, but not remotely."
        ask_yn "y" "Do you want to delete the old local $thisrel tagging?"
        dotagdel="$yn_answer"
        if [ "$dotagdel" == "y" ]; then
            git tag --delete $thisrel
            zero_or_die "$?" "git tag --delete completion status problem."
            usedonloc="n"  # cleaned up now
        fi
    fi
    if [ "$usedonloc" == "y" ]; then
        aux_die "This release $thisrel already used locally."
    fi
    aux_info "This release $thisrel is not now used locally."
}
function do_make_clean() {
    cd "$reporoot"
    make clean > /dev/null
    zero_or_die "$?" "There was a problem trying to do make clean."
    aux_info "make clean completed ok."
}
function verify_everything_built_ok() {
    # make sure we built everything ok
    cd "$reporoot"
    local buildoutput=$(make build)
    zero_or_die "$?" "There was a problem doing 'make build'."
    local lastline=$(echo "$buildoutput" | tail -1)
    if [ "$lastline" != "[build complete]" ]; then
        aux_die "Unexpected final build message ($lastline)."
    fi
    # check for some error messages that do not set bad status
    local grepoutput
    local errstring
    local errstrings=("ERROR:" "syntax error")
    for errstring in "${errstrings[@]}"; do
        grepoutput=$(echo "$buildoutput" | grep "$errstring")
        if [ ! -z "$grepoutput" ]; then
            aux_die "build output contained bad string ($errstring)."
        fi
    done
    aux_info "build appears to be successful."
}
function verify_unit_tests_ok() {
    # make sure tests ok
    local timestamp=$(date +%Y-%m-%dT%H:%M:%S%z)
    cd "$reporoot"
    aux_info "unit testing beginning at $timestamp; this might take a few minutes."
    tmpvar=$(make checktest | tail -1)
    zero_or_die "$?" "There was a problem doing 'make checktest'."
    if [ "${tmpvar:0:3}" != "ok " ]; then
        aux_error "Unexpected final checktest message ($tmpvar)."
        exit 1
    fi
    timestamp=$(date +%Y-%m-%dT%H:%M:%S%z)
    aux_info "unit testing finished at $timestamp."
    aux_info "unit tests appear to be successful."
}
function log_release_attempt() {
    cd "$reporoot"
    make log-release-attempt
    zero_or_die "$?" "There was a problem trying to log this release attempt."
    aux_info "This release ($thisrel) attempt has been logged."
}
function stage_manuals() {
    cd "$reporoot"
    make stage-manuals > /dev/null
    zero_or_die "$?" "There was a problem trying to do stage manuals."
    aux_info "stage manuals completed ok."
}
function do_git_add_and_commit() {
    local commitmsg="$1"
    if [ -z "$commitmsg" ]; then
        commitmsg="creating release $thisrel"
    fi
    cd "$reporoot"
    git add .
    git commit -m "$commitmsg"
}
function is_git_clean() {
    # look for clean git status
    git_clean_yn="n"
    local gitoutput
    local gitlinecnt
    cd "$reporoot"
    gitoutput=$(git status --porcelain)
    if [ -z "$gitoutput" ]; then
        gitlinecnt="0"
    else
        gitlinecnt=$(echo $tmpvar | wc -l)
    fi
    if [ "$gitlinecnt" == "0" ]; then
        git_clean_yn="y"
    else
        git_clean_yn="n"
    fi
    return 0
}
function verify_clean_git_status() {
    # look for clean git status
    cd "$reporoot"
    local keeplooping="y"
    while [ "$keeplooping" == "y" ]; do
        is_git_clean
        if [ "$git_clean_yn" == "y" ]; then
            keeplooping="n"
            aux_info "git status appear to be clean, for now."
        else
            ask_yn "y" "git status not yet clean, do git add and commit?"
            if [ "$yn_answer" == "y" ]; then
                do_git_add_and_commit
            else
                aux_die "git status not clean."
            fi
        fi
    done
}
function do_git_pull() {
    # try a git pull and check it
    gitpullout=$(git pull origin master 2>/dev/null)
    if [ "$?" != 0 ]; then
        aux_error "Command status problem with git pull"
        exit 1
    fi
    gitpulllastline=$(echo "$gitpullout" | tail -1)
    if [ "$gitpulllastline" != "Already up-to-date." ]; then
        aux_error "git pull indicates some possible issues."
        exit 1
    fi
    aux_info "git pull did not reveal any new issues."
}
function do_git_push() {
    # push changes if needed
    gitstatout=$(git status)
    grepout=$(echo "$gitstatout" | grep "use" | grep "git push" | grep "publish" | grep "local commits")
    if [ ! -z "$grepout" ]; then
        aux_debug "$grepout"
        aux_notice "Looks like some local changes need to be pushed to remote origin."
        aux_notice "Pushing changes to remote origin..."
        git push origin master 2>/dev/null
        if [ "$?" != "0" ]; then
            aux_error "git push completion status problem."
            exit 1
        fi
        gitstatout=$(git status)
        grepout=$(echo "$gitstatout" | grep "use" | grep "git push" | grep "publish" | grep "local commits")
        if [ ! -z "$grepout" ]; then
            aux_error "Unable to get in sync with remote origin, see git status."
            exit 1
        fi
    fi
    aux_info "Local git appears to be in sync with remote git."
}
function tag_local_files() {
    # tag local files
    dotag="y"
    if [ "$interactiveflag" == "y" ]; then
        dotag="n"
        while true; do
            read -p "Do you want to tag local files with '$thisrel' [yN]? " answer
            case $answer in
                [Yy]* ) dotag="y"; break;;
                [Nn]* ) dotag="n"; break;;
                * ) echo "Please answer yes or no.";;
            esac
        done
    fi
    if [ "$dotag" == "y" ]; then
        git tag $thisrel
        if [ "$?" != "0" ]; then
            aux_error "git tag completion status problem."
            exit 1
        fi
    else
        aux_error "exiting early (at local tag phase) by user selection."
        exit 1
    fi
    aux_info "Local files tagged with '$thisrel'."
}
function create_runtime_tarball() {
    # now make the run-time distribution tar file
    cd "$reporoot"
    make clean-runtime-dist > /dev/null
    if [ "$?" != "0" ]; then
        aux_error "make clean-runtime-dist completion status was not 0."
        exit 1
    fi
    make runtime-dist > /dev/null
    if [ "$?" != "0" ]; then
        aux_error "make runtime-dist completion status was not 0."
        exit 1
    fi
    tarfile="${reporoot}/dist/auxilium-run-${thisrel}.tar.gz"
    if [ ! -e  "$tarfile" ]; then
        aux_error "File not found ($tarfile)."
        exit 1
    fi
    aux_info "Run-tine distribution tar file created ($tarfile)."
}
function unit_test_runtime_staging_area() {
    # test what was copied to release runtime staging area
    cd "${reporoot}"
    make runtime-test
    zero_or_die "$?" "Unit tests on release working copy failed."
    aux_info "Unit tests on release working copy passed."
}
function push_tag_to_remote() {
    # now push the tag to the remote git server
    dotag="y"
    if [ "$interactiveflag" == "y" ]; then
        dotag="n"
        while true; do
            read -p "Do you want to tag remote files with '$thisrel' [yN]? " answer
            case $answer in
                [Yy]* ) dotag="y"; break;;
                [Nn]* ) dotag="n"; break;;
                * ) echo "Please answer yes or no.";;
            esac
        done
    fi
    if [ "$dotag" == "y" ]; then
        git push origin $thisrel
        if [ "$?" != "0" ]; then
            aux_error "git push origin $thisrel completion status problem."
            exit 1
        fi
    else
        aux_error "exiting early (at remote tag phase) by user selection."
        exit 1
    fi
    aux_info "Remote files tagged with '$thisrel'."
}
function create_devtime_tarball() {
    # make dev distribution
    cd "$reporoot"
    make devtime-dist > /dev/null
    if [ "$?" != "0" ]; then
        aux_error "make devtime-dist completion status was not 0."
        exit 1
    fi
    tarfile2="${reporoot}/dist/auxilium-dev-${thisrel}.tar.gz"
    if [ ! -e  "$tarfile2" ]; then
        aux_error "File not found ($tarfile2)."
        exit 1
    fi
    aux_info "Dev-time distribution tar file created ($tarfile)."
}
#
# begin main program
#
ifsorg="$IFS"
lf=$'\x0a'   # ascii linefeed character
cmdfile=$(readlink -f "$0")
cmddir=$(dirname "$cmdfile")
reporoot=$(readlink -f "$cmddir/..")
cmdname="${cmdfile##*/}"
version="$cmdname version 1.0 (2017-07-03)"
versionflag="n"
helpflag="n"
checkcnt=$((0))
checkfail=$((0))
warnflag="n"
warncnt=$((0))
debugflag="n"
errorcnt=$((0))
verboseflag="n"
# check if running interactively
if [[ -t "0" || -p /dev/stdin ]]; then
    interactiveflag="y"
else
    interactiveflag="n"
fi
while [ $# -gt 0 ]; do
    param="$1"
    shift
    if [[ "$param"   == "--version" || "$param" == "-v" ]]; then
        versionflag="y"
    elif [[ "$param" == "--help"    || "$param" == "-h" ]]; then
        helpflag="y"
    elif [[ "$param" == "--warn"    || "$param" == "-w" ]]; then
        warnflag="y"
    elif [[ "$param" == "--debug"   || "$param" == "-d" ]]; then
        debugflag="y"
        warnflag="y"
    elif [[ "$param" == "--verbose" || "$param" == "-b" ]]; then
        verboseflag="y"
    else
        echo "ERROR: bad command line option ($param)." >&2
        exit 1
    fi
done
check_show_version  # show version if it was requested
check_show_help     # show help if it was requested
check_early_exit    # exit now if -h or -v
#
# do release
#
aux_debug "cmdfile=$cmdfile."
aux_debug "cmddir=$cmddir."
aux_debug "reporoot=$reporoot."
aux_debug "cmdname=$cmdname."
verify_on_master_branch
verify_makefile_exists
get_release_version
get_local_release_numbers
get_last_existing_local_release_version
get_remote_release_numbers
get_last_existing_remote_release_version
check_release_version_not_used_on_remote
check_release_version_not_used_on_local
#TBD#do_make_clean
verify_everything_built_ok
verify_unit_tests_ok
log_release_attempt
stage_manuals
verify_clean_git_status
aux_die "TBD DEBUG"
do_git_pull
do_git_push
tag_local_files
create_runtime_tarball
unit_test_runtime_staging_area
push_tag_to_remote
create_devtime_tarball
# script hard work done
aux_notice "Looks like this script finished nicely, congratulations."
aux_notice "You still need to:"
aux_notice "  - Log onto the GitHub web site."
aux_notice "  - Create the release from the now-existing tag."
aux_notice "  - Upload the runtime tar file ($tarfile),"
aux_notice "      and the devtime tar file ($tarfile2),"
aux_notice "      to the release binary attachment area."
aux_notice "  - Edit the online release notes for the release."
aux_notice "  - Check the 'pre-release' box if applicable."
aux_notice "  - Click the Publish Release button."
aux_notice "Good luck!"
exit 0
