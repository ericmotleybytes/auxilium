#!/usr/bin/env bash
##############################################################################
# This script displays the first line of a file if the file exists or the
# name of the file if it does not. It is designed to work with how
# auxilium uses make and .dep dependency files generated by the sbin/pp-dep
# script.
#
# usage:
#     pp-putdep [options] [--] <file>
#
# options:
#     -d --debug   # output extra debug info to stderr
#     -v --version # display version info
#     -h --help    # display help info
#
##############################################################################
#
# define functions
#
function aux_debug() {
    msg="$1"
    if [ "$DebugFlag" == "y" ]; then
        echo "DEBUG: $msg" >&2
    fi
}
function aux_die() {
    msg="$1"
    echo "ERROR: ($CmdName) $msg" >&2
    exit 1
}
function show_help() {
    echo "$CmdName - show 1 line or filename"
    echo "usage:"
    echo "  $CmdName [options] [--] <file...>"
    echo "  options:"
    echo "    -d --debug   # output extra debug info to stderr."
    echo "    -v --version # display version info."
    echo "    -h --help    # display help info."
    exit 0
}
function show_version() {
    echo "$Version"
    exit 0
}
#
# begin main program
#
CmdFile=$(readlink -f "$0")
CmdName="${CmdFile##*/}"
CmdDir=$(dirname "$CmdFile")
RootDir=$(readlink -f "$CmdDir/..")
Version="$CmdName version 1.0 (2017-07-14)"
DebugFlag="n"
DashDashFlag="n"
TopFile=""
while [ $# -gt 0 ]; do
    param="$1"
    shift
    if   [[ "$param" == "-v" || "$param" == "--version" ]]; then
        show_version
    elif [[ "$param" == "-h" || "$param" == "--help"    ]]; then
        show_help
    elif [[ "$param" == "-d" || "$param" == "--debug"   ]]; then
        DebugFlag="y"
    elif [[ "$param" == "--" ]]; then
        DashDashFlag="y"
    elif [[ "${param:0:1}" == "-" && "$DashDashFlag" == "n" ]]; then
        aux_die "bad command line option ($param)."
    else
        if [ -z "$TopFile" ]; then
            TopFile="$param"
        else
            aux_die "Too many files on command line!"
        fi
    fi
done
#
# check if file exists
#
if [ -e "$TopFile" ]; then
    head -1 "$TopFile"
else
    echo "$TopFile"
fi
#
# all done
#
exit 0
